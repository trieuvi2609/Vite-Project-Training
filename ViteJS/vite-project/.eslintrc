{
  "root": true,
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "airbnb",
    "plugin:prettier/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": { "project": ["./tsconfig.json"] },
  "plugins": ["@typescript-eslint", "prettier"],
  "rules": {
    "@typescript-eslint/strict-boolean-expressions": 0,
    "react/jsx-props-no-spreading": 0,
    "no-restricted-globals": ["off"],
    "@typescript-eslint/no-unused-vars": ["off"],
    "react/react-in-jsx-scope": "off",
    "react/jsx-filename-extension": [2, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
    "import/no-unresolved": 0,
    "import/extensions": 0,
    "import/order": 0,
    "no-param-reassign": 0,
    "react/jsx-curly-brace-presence": 0,
    "import/prefer-default-export": 0,
    "react/function-component-definition": 0,
    "arrow-body-style": 0,
    "import/no-extraneous-dependencies": 0,
    "no-unused-vars": 0,
    "@typescript-eslint/no-explicit-any": 0,
    "import/no-useless-path-segments": 0,
    "eslint-disable no-undef": 0,
    "no-undef": 0,
    "no-lonely-if": 0,
    "consistent-return": 0,
    "react/jsx-no-useless-fragment": 0
  },
  "ignorePatterns": ["src/**/*.test.ts", "src/frontend/generated/*"]
}

// module.exports = {
//   extends: [
//     // By extending from a plugin config, we can get recommended rules without having to add them manually.
//     'eslint:recommended',
//     'plugin:react/recommended',
//     'plugin:import/recommended',
//     'plugin:jsx-a11y/recommended',
//     'plugin:@typescript-eslint/recommended',
//     // This disables the formatting rules in ESLint that Prettier is going to be responsible for handling.
//     // Make sure it's always the last config, so it gets the chance to override other configs.
//     'eslint-config-prettier',
//   ],
//   settings: {
//     react: {
//       // Tells eslint-plugin-react to automatically detect the version of React to use.
//       version: 'detect',
//     },
//     // Tells eslint how to resolve imports
//     'import/resolver': {
//       node: {
//         paths: ['src'],
//         extensions: ['.js', '.jsx', '.ts', '.tsx'],
//       },
//     },
//   },
//   rules: {
//     // Add your own rules here to override ones from the extended configs.
//   },
// };
